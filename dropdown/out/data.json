{
    "project": {
        "name": "The Dropdown API",
        "description": "A dropdown plugin created using Marionette / Backbone.",
        "version": "1.0.0",
        "url": ""
    },
    "files": {
        "collections/bodyItemsCollection.js": {
            "name": "collections/bodyItemsCollection.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "collections/selectedTags.js": {
            "name": "collections/selectedTags.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "models/bodyItemModel.js": {
            "name": "models/bodyItemModel.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "models/selectedTag.js": {
            "name": "models/selectedTag.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "views/ddBodyCompView.js": {
            "name": "views/ddBodyCompView.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "views/ddBodyEmptyView.js": {
            "name": "views/ddBodyEmptyView.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "views/ddBodyItemView.js": {
            "name": "views/ddBodyItemView.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "views/ddContainerLayoutView.js": {
            "name": "views/ddContainerLayoutView.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "views/ddHeaderLayoutView.js": {
            "name": "views/ddHeaderLayoutView.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "views/selectedTagItemView.js": {
            "name": "views/selectedTagItemView.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "views/selectedTagsCompView.js": {
            "name": "views/selectedTagsCompView.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {},
    "elements": {},
    "classitems": [
        {
            "file": "collections/bodyItemsCollection.js",
            "line": 1,
            "description": "Created by Yashraj.C on 12/21/2015.",
            "class": ""
        },
        {
            "file": "collections/bodyItemsCollection.js",
            "line": 222,
            "description": "Searches the item in the collection and marks it as selected.",
            "params": [
                {
                    "name": "modelParam",
                    "description": "A model which should be searched in the list.",
                    "type": "Backbone.Model"
                }
            ],
            "class": ""
        },
        {
            "file": "collections/selectedTags.js",
            "line": 1,
            "description": "Created by Yashraj.C on 1/1/2016.",
            "class": ""
        },
        {
            "file": "models/bodyItemModel.js",
            "line": 1,
            "description": "Created by Yashraj.C on 12/21/2015.",
            "class": ""
        },
        {
            "file": "models/selectedTag.js",
            "line": 1,
            "description": "Created by Yashraj.C on 1/1/2016.",
            "class": ""
        },
        {
            "file": "views/ddBodyCompView.js",
            "line": 1,
            "description": "Created by Yashraj.C on 12/4/2015.",
            "class": ""
        },
        {
            "file": "views/ddBodyCompView.js",
            "line": 199,
            "description": "Click handler for the footer item click.\nChecks if the footer config was provided and if yes, triggers the click event of the footer.",
            "params": [
                {
                    "name": "event",
                    "description": "An event object for the handler",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "views/ddBodyCompView.js",
            "line": 214,
            "description": "Click handler for the footer item click.\nChecks if the footer config was provided and if yes, triggers the click event of the footer.",
            "params": [
                {
                    "name": "event",
                    "description": "An event object for the handler",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "views/ddBodyCompView.js",
            "line": 230,
            "description": "Deselects all the items in the collection.",
            "class": ""
        },
        {
            "file": "views/ddBodyCompView.js",
            "line": 238,
            "description": "Handles the bodyItemClick which is triggered by the child view.\nPerforms the selection logic for the item based on the config - multiSelect | singleSelect\nTriggers the event that is listened by the parent view.",
            "params": [
                {
                    "name": "itemView",
                    "description": "A view representing the item that was clicked.",
                    "type": "View"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "views/ddBodyCompView.js",
            "line": 260,
            "description": "Handles the child event triggered by the action item click.\nInvokes the action item click callback specified in the configuration.",
            "params": [
                {
                    "name": "view",
                    "description": "Item view which triggered the event.",
                    "type": "View"
                },
                {
                    "name": "itemModel",
                    "description": "Model representing the view that triggered the event.",
                    "type": "Model"
                },
                {
                    "name": "itemConfig",
                    "description": "Object representing the item action that was clicked.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "views/ddBodyCompView.js",
            "line": 277,
            "description": "Handles the add new item event that gets triggered by the child view.\nTriggers the event that is listened by the parent view to act on the same.",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "views/ddBodyCompView.js",
            "line": 286,
            "description": "Filters the results in the collection based on the text that is passed to the view.",
            "params": [
                {
                    "name": "text",
                    "description": "A string used to filter the items in the collection.",
                    "type": "String"
                },
                {
                    "name": "selectedItems",
                    "description": "An array of selected items to highlight the newly returned items by the server.",
                    "type": "Array"
                }
            ],
            "class": ""
        },
        {
            "file": "views/ddBodyCompView.js",
            "line": 299,
            "description": "Shows the loader in the view.",
            "class": ""
        },
        {
            "file": "views/ddBodyCompView.js",
            "line": 308,
            "description": "Hides the loader in the view.",
            "class": ""
        },
        {
            "file": "views/ddBodyCompView.js",
            "line": 317,
            "description": "A handler that gets passed to the filter item method of the collection\nto be invoked whenever the data in the collection has been refreshed based on\nwhatever user has typed",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "views/ddBodyCompView.js",
            "line": 342,
            "description": "Returns true of false based on the visible items present in the collection.",
            "params": [
                {
                    "name": "collection",
                    "description": "A collection whose items should be verified.",
                    "type": "Collection"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "views/ddBodyCompView.js",
            "line": 356,
            "description": "Traverses through the list based on the keyCode number that is passed.\nPreforms various logic based on the key that was pressed.\nFor the navigation in the list keys, highlights and scrolls to the items that should be shown\nas selected.",
            "params": [
                {
                    "name": "keyCode",
                    "description": "A number indicating the key that was pressed.",
                    "type": "Number"
                }
            ],
            "class": ""
        },
        {
            "file": "views/ddBodyCompView.js",
            "line": 424,
            "description": "Deselects the item in the collection that is passed.",
            "params": [
                {
                    "name": "removedModel",
                    "description": "A model that should be deselected.",
                    "type": "Model"
                }
            ],
            "class": ""
        },
        {
            "file": "views/ddBodyCompView.js",
            "line": 433,
            "description": "Selects the item in the collection that is passed.",
            "params": [
                {
                    "name": "model",
                    "description": "A model that should be deselected.",
                    "type": "Model"
                }
            ],
            "class": ""
        },
        {
            "file": "views/ddBodyCompView.js",
            "line": 442,
            "description": "Returns the visibility of the view.",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "views/ddBodyCompView.js",
            "line": 450,
            "description": "Shows the list view. Binds the event to hide the view if user clicks anywhere else.",
            "class": ""
        },
        {
            "file": "views/ddBodyCompView.js",
            "line": 471,
            "description": "Hides the view and unbinds the events that were bound while showing the view.",
            "class": ""
        },
        {
            "file": "views/ddBodyCompView.js",
            "line": 479,
            "description": "Binds the hide events to hide the dropdown list whenever user clicks somewhere else.",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "views/ddBodyCompView.js",
            "line": 493,
            "description": "Unbinds the event that was bound on the document while showing the list.",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "views/ddBodyCompView.js",
            "line": 501,
            "description": "Scrolls to the items that should be shown as highlighted whenever user is traversing\nin the list.",
            "params": [
                {
                    "name": "item",
                    "description": "A model representing the item where the view should be scrolled.",
                    "type": "Model"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "views/ddBodyCompView.js",
            "line": 539,
            "description": "Deselects all the items in the collection.",
            "class": ""
        },
        {
            "file": "views/ddBodyEmptyView.js",
            "line": 1,
            "description": "Created by Yashraj.C on 12/7/2015.",
            "class": ""
        },
        {
            "file": "views/ddBodyEmptyView.js",
            "line": 31,
            "description": "Click handler for the add new item.\nTriggers the add new item if the config is set to allow add new items.",
            "params": [
                {
                    "name": "event",
                    "description": "Event object for the click event.",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "views/ddBodyItemView.js",
            "line": 1,
            "description": "Created by Yashraj.C on 12/4/2015.",
            "class": ""
        },
        {
            "file": "views/ddBodyItemView.js",
            "line": 55,
            "description": "Click handler for the body item.\nTriggers the itemClick that gets listened by the parent view.",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "views/ddBodyItemView.js",
            "line": 69,
            "description": "Handler for the action item click.\nGets the item config for the clicked action and triggers the event being listened by the parent view.",
            "params": [
                {
                    "name": "event",
                    "description": "Event object for the event.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "views/ddBodyItemView.js",
            "line": 90,
            "description": "A change attribute handler for the model.\nListening to the selected attribute of the model.\nUpdates the view whenever the model gets changed.",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "views/ddBodyItemView.js",
            "line": 106,
            "description": "A change attribute handler for the model.\nListening to the visible attribute of the model.\nUpdate the view whenever the view gets changed.",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "views/ddBodyItemView.js",
            "line": 116,
            "description": "Mouse over event handler for the view to manipulate the hover classes.",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "views/ddBodyItemView.js",
            "line": 124,
            "description": "Mouse out event handler for the view to manipulate the hover classes.",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "views/ddBodyItemView.js",
            "line": 132,
            "description": "Adds the hover class to the view.",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "views/ddBodyItemView.js",
            "line": 140,
            "description": "Removes the hover class from the view.",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "views/ddContainerLayoutView.js",
            "line": 1,
            "description": "Created by Yashraj.C on 12/4/2015.",
            "class": ""
        },
        {
            "file": "views/ddContainerLayoutView.js",
            "line": 120,
            "description": "Handler for the toggleOptionsList triggered by the headerView.\nHandles the show / hide for the dropdown body view.",
            "class": ""
        },
        {
            "file": "views/ddContainerLayoutView.js",
            "line": 160,
            "description": "Returns the selected items for the dropdown.",
            "return": {
                "description": "An array of selected items.",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "views/ddContainerLayoutView.js",
            "line": 169,
            "description": "Sets the items specified as selected items in the dropdown view.",
            "params": [
                {
                    "name": "items",
                    "description": "An array of items that should be set as selected.",
                    "type": "Array"
                }
            ],
            "class": ""
        },
        {
            "file": "views/ddContainerLayoutView.js",
            "line": 179,
            "description": "A function that returns the text that has been entered in the\ninput box of the dropdown while searching.",
            "class": ""
        },
        {
            "file": "views/ddContainerLayoutView.js",
            "line": 187,
            "description": "Handler for the textSearch triggered by the headerView.",
            "params": [
                {
                    "name": "text",
                    "description": "A string to search in the list.",
                    "type": "String"
                },
                {
                    "name": "selectedItems",
                    "description": "An array of selected items used by the body view to highlight the\n     newly returned items from the server.",
                    "type": "Array"
                }
            ],
            "class": ""
        },
        {
            "file": "views/ddContainerLayoutView.js",
            "line": 199,
            "description": "Handler for the traverseListOrSelectItem triggered by the headerView.",
            "params": [
                {
                    "name": "keyCode",
                    "description": "A number indicating the key pressed.",
                    "type": "Number"
                }
            ],
            "class": ""
        },
        {
            "file": "views/ddContainerLayoutView.js",
            "line": 208,
            "description": "Handler for the bodyItemClick triggered by the bodyView.\nUpdates the header view to reflect the selection.\nInvokes the onItemSelect method if specified.",
            "params": [
                {
                    "name": "clickedItemView",
                    "description": "A view representing the item that was clicked.",
                    "type": "View"
                }
            ],
            "class": ""
        },
        {
            "file": "views/ddContainerLayoutView.js",
            "line": 223,
            "description": "Clears the headerView and bodyView. Removes all the selections that are done.",
            "class": ""
        },
        {
            "file": "views/ddContainerLayoutView.js",
            "line": 234,
            "description": "Handler for the addNewItem triggered by the bodyView.",
            "class": ""
        },
        {
            "file": "views/ddContainerLayoutView.js",
            "line": 241,
            "description": "Handles the footerClick triggered by the dropdown body view.\nInvokes the footer item click if present.",
            "class": ""
        },
        {
            "file": "views/ddContainerLayoutView.js",
            "line": 255,
            "description": "Handler for the deselectItem triggered by the headerView.",
            "params": [
                {
                    "name": "removedModel",
                    "description": "A model representing the item that should be deselected.",
                    "type": "Model"
                }
            ],
            "class": ""
        },
        {
            "file": "views/ddContainerLayoutView.js",
            "line": 264,
            "description": "Handler for the clearing single select.\nIt'll invoke passed handler if there is any.",
            "class": ""
        },
        {
            "file": "views/ddContainerLayoutView.js",
            "line": 274,
            "description": "Handler for the selectItem triggered by the headerView.",
            "params": [
                {
                    "name": "model",
                    "description": "A model representing the item that should be deselected.",
                    "type": "Model"
                }
            ],
            "class": ""
        },
        {
            "file": "views/ddContainerLayoutView.js",
            "line": 283,
            "description": "Handler for the hideOptionsList triggered by the headerView.",
            "class": ""
        },
        {
            "file": "views/ddContainerLayoutView.js",
            "line": 290,
            "description": "This is to check view's status.",
            "return": {
                "description": "",
                "type": "boolean|exports.constants.isDisable"
            },
            "class": ""
        },
        {
            "file": "views/ddContainerLayoutView.js",
            "line": 298,
            "description": "This method is to disable dropdown programmatically.",
            "class": ""
        },
        {
            "file": "views/ddContainerLayoutView.js",
            "line": 317,
            "description": "This method is to enable dropdown programmatically.",
            "class": ""
        },
        {
            "file": "views/ddContainerLayoutView.js",
            "line": 335,
            "description": "A method which focuses on the input text of the dropdown.",
            "class": ""
        },
        {
            "file": "views/ddContainerLayoutView.js",
            "line": 342,
            "description": "This method is to call search functionality programmatically.\nIt'll be used in ajax support mostly.",
            "params": [
                {
                    "name": "term",
                    "description": "A term represents text."
                }
            ],
            "class": ""
        },
        {
            "file": "views/ddHeaderLayoutView.js",
            "line": 1,
            "description": "Created by Yashraj.C on 12/4/2015.",
            "class": ""
        },
        {
            "file": "views/ddHeaderLayoutView.js",
            "line": 73,
            "description": "Returns the selected items array.",
            "return": {
                "description": "Items that are selected.",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "views/ddHeaderLayoutView.js",
            "line": 82,
            "description": "Sets the items specified as selected items in the dropdown view.",
            "params": [
                {
                    "name": "items",
                    "description": "An array of items that should be set as selected.",
                    "type": "Array"
                }
            ],
            "class": ""
        },
        {
            "file": "views/ddHeaderLayoutView.js",
            "line": 91,
            "description": "A function that returns the text that has been entered in the\ninput box of the dropdown while searching.",
            "class": ""
        },
        {
            "file": "views/ddHeaderLayoutView.js",
            "line": 99,
            "description": "Handler for the toggleOptionsList triggered by the selectedTagsView.\nTriggers the event that is listened by the ddContainerLayoutView.",
            "class": ""
        },
        {
            "file": "views/ddHeaderLayoutView.js",
            "line": 107,
            "description": "Invokes the selectedTagsView's method to update the view of the current selected items.",
            "params": [
                {
                    "name": "selectedItem",
                    "description": "A model representing the item that should be added to the selected items list.",
                    "type": "Model"
                }
            ],
            "class": ""
        },
        {
            "file": "views/ddHeaderLayoutView.js",
            "line": 116,
            "description": "Handler for the traverseListOrSelectItem triggered by the selectedTagsView.\nTriggers the event that is listened by the ddContainerLayoutView.",
            "params": [
                {
                    "name": "eventCode",
                    "description": "A number indicating the eventCode for the key pressed.",
                    "type": "Number"
                }
            ],
            "class": ""
        },
        {
            "file": "views/ddHeaderLayoutView.js",
            "line": 126,
            "description": "Handler for the textSearch triggered by the selectedTagsView.\nTriggers the event that is listened by the ddContainerLayoutView.",
            "params": [
                {
                    "name": "searchedText",
                    "description": "A string that should be used as a string to search in the item list.",
                    "type": "String"
                },
                {
                    "name": "selectedItems",
                    "description": "An array of selected items to be used by the body view to highlight the new results\n     which have been returned from the server",
                    "type": "Array"
                }
            ],
            "class": ""
        },
        {
            "file": "views/ddHeaderLayoutView.js",
            "line": 139,
            "description": "Handler for the hideOptionsList triggered by the selectedTagsView.\nTriggers the event that is listened by the ddContainerLayoutView.",
            "class": ""
        },
        {
            "file": "views/ddHeaderLayoutView.js",
            "line": 147,
            "description": "Event handler for the search icon click.",
            "class": ""
        },
        {
            "file": "views/ddHeaderLayoutView.js",
            "line": 154,
            "description": "Adds a new item to the selected tags. Gets called by the parent view.",
            "class": ""
        },
        {
            "file": "views/ddHeaderLayoutView.js",
            "line": 161,
            "description": "Handler for the deselectItem triggered by the selectedTagsView.\nTriggers the event that is listened by the ddContainerLayoutView.",
            "params": [
                {
                    "name": "removedModel",
                    "description": "A model representing the item that should be deselected.",
                    "type": "Model"
                }
            ],
            "class": ""
        },
        {
            "file": "views/ddHeaderLayoutView.js",
            "line": 171,
            "description": "Handler for the selectItem triggered by the selectedTagsView.\nTriggers the event that is listened by the ddContainerLayoutView.",
            "params": [
                {
                    "name": "model",
                    "description": "A model representing the item that should be deselected.",
                    "type": "Model"
                }
            ],
            "class": ""
        },
        {
            "file": "views/ddHeaderLayoutView.js",
            "line": 182,
            "description": "A method which focuses on the input text of the dropdown.",
            "class": ""
        },
        {
            "file": "views/ddHeaderLayoutView.js",
            "line": 189,
            "description": "A method to clear the view.",
            "class": ""
        },
        {
            "file": "views/ddHeaderLayoutView.js",
            "line": 195,
            "description": "This method is to call search functionality programmatically.\nIt'll be called from parent view.",
            "params": [
                {
                    "name": "term",
                    "description": "A term represents text."
                }
            ],
            "class": ""
        },
        {
            "file": "views/ddHeaderLayoutView.js",
            "line": 209,
            "description": "Handler for the handleClearSingleSelect triggered by the selectedTagsView.\nTriggers the event that is listened by the ddContainerLayoutView.",
            "class": ""
        },
        {
            "file": "views/ddHeaderLayoutView.js",
            "line": 217,
            "description": "This method is to disable dropdown programmatically.",
            "class": ""
        },
        {
            "file": "views/ddHeaderLayoutView.js",
            "line": 227,
            "description": "This method is to enable dropdown programmatically.",
            "class": ""
        },
        {
            "file": "views/selectedTagItemView.js",
            "line": 1,
            "description": "Created by Yashraj.C on 12/4/2015.",
            "class": ""
        },
        {
            "file": "views/selectedTagItemView.js",
            "line": 27,
            "description": "Click handler for the remove icon to remove the tag that is clicked.",
            "params": [
                {
                    "name": "event",
                    "description": "An event object for the item that needs to be removed.",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "views/selectedTagsCompView.js",
            "line": 1,
            "description": "Created by Yashraj.C on 12/4/2015.",
            "class": ""
        },
        {
            "file": "views/selectedTagsCompView.js",
            "line": 101,
            "description": "Click event handler for the list toggle button click.\nTriggers the event that is listened by the parent view - ddHeaderLayoutView.",
            "class": ""
        },
        {
            "file": "views/selectedTagsCompView.js",
            "line": 109,
            "description": "Click event handler for the input box present in the view.\nTriggers the event that is listened by the parent view - ddHeaderLayoutView.",
            "params": [
                {
                    "name": "event",
                    "description": "Event object for event.",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "views/selectedTagsCompView.js",
            "line": 120,
            "description": "Key up event handler for the input box present in the view.\nChecks the key that was pressed and triggers the respective event based on the key\npressed.",
            "params": [
                {
                    "name": "event",
                    "description": "Event object for the event.",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "views/selectedTagsCompView.js",
            "line": 162,
            "description": "Updates selected item for the view.\nIf view is single select, updates the text box's value as the selected value, else\nadds the selected item to the selected tags view.",
            "params": [
                {
                    "name": "selectedItem",
                    "description": "A model representing the item that needs to be selected.",
                    "type": "Backbone.Model"
                }
            ],
            "class": ""
        },
        {
            "file": "views/selectedTagsCompView.js",
            "line": 195,
            "description": "Removes the item from the selected tags.\nFinds the item that was passed from the collection and removes it from the collections.\nView gets updated eventually.",
            "params": [
                {
                    "name": "modelToRemove",
                    "description": "A model that needs to be removed from the view.",
                    "type": "Backbone.Model"
                }
            ],
            "class": ""
        },
        {
            "file": "views/selectedTagsCompView.js",
            "line": 215,
            "description": "Gets called whenever user wants to add an item that is not present in the list.\nInvokes the beforeNewItemAdd handler if specified and adds only if the callback returns true.",
            "class": ""
        },
        {
            "file": "views/selectedTagsCompView.js",
            "line": 241,
            "description": "Adds the new item to the selected tags list.",
            "params": [
                {
                    "name": "inputText",
                    "description": "A string indicating the item that should be added to the list.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "views/selectedTagsCompView.js",
            "line": 254,
            "description": "Handles the removeTag event that gets triggered by the child view.\nTriggers the event to deselect the item in the list of items.",
            "params": [
                {
                    "name": "itemView",
                    "description": "A view that triggered the removeTag event.",
                    "type": "View"
                }
            ],
            "class": ""
        },
        {
            "file": "views/selectedTagsCompView.js",
            "line": 266,
            "description": "Returns the selected items in the view.",
            "return": {
                "description": "An array of the items that are selected.",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "views/selectedTagsCompView.js",
            "line": 294,
            "description": "Updates the selected items based on the items list provided.",
            "params": [
                {
                    "name": "items",
                    "description": "An array of items that should be set as selected.",
                    "type": "Array"
                }
            ],
            "class": ""
        },
        {
            "file": "views/selectedTagsCompView.js",
            "line": 325,
            "description": "Handles the clear icon click for the input box.\nClears the input value and resets the selected item config\nif the dropdown is single select.",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "class": ""
        },
        {
            "file": "views/selectedTagsCompView.js",
            "line": 348,
            "description": "A focus event handler for the input box of the dropdown.\nChecks the dropdown's config and selects the entire text of the input if needed.",
            "params": [
                {
                    "name": "event",
                    "description": "Event object of the event.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "views/selectedTagsCompView.js",
            "line": 362,
            "description": "A function that returns the text that has been entered in the\ninput box of the dropdown while searching.",
            "class": ""
        },
        {
            "file": "views/selectedTagsCompView.js",
            "line": 370,
            "description": "A method which focuses on the input text of the dropdown.\nAdded a set timeout as the item may not have been rendered in the dom whenever\nfocus is immediately called after the render of dropdown.",
            "class": ""
        },
        {
            "file": "views/selectedTagsCompView.js",
            "line": 383,
            "description": "Sets the value for the input control.",
            "params": [
                {
                    "name": "text",
                    "description": "A value that should be set for the input.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "views/selectedTagsCompView.js",
            "line": 393,
            "description": "Adds the items to the collection.",
            "params": [
                {
                    "name": "items",
                    "description": "An array of the items that should be added in the collection.",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "views/selectedTagsCompView.js",
            "line": 403,
            "description": "Focuses the input control.",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "views/selectedTagsCompView.js",
            "line": 413,
            "description": "Clears the input text's value.\nClears the selected items collection to remove all the selected items.",
            "class": ""
        },
        {
            "file": "views/selectedTagsCompView.js",
            "line": 423,
            "description": "This method is to call search functionality programmatically.\nIt'll be called from parent view.",
            "params": [
                {
                    "name": "term",
                    "description": "A term represents text."
                }
            ],
            "class": ""
        },
        {
            "file": "views/selectedTagsCompView.js",
            "line": 447,
            "description": "This method is to disable dropdown programmatically.",
            "class": ""
        },
        {
            "file": "views/selectedTagsCompView.js",
            "line": 458,
            "description": "This method is to enable dropdown programmatically.",
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " views/ddBodyCompView.js:342"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " views/ddBodyCompView.js:442"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " views/ddContainerLayoutView.js:160"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " views/ddContainerLayoutView.js:290"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " views/ddHeaderLayoutView.js:73"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " views/selectedTagsCompView.js:266"
        },
        {
            "message": "Missing item type\nCreated by Yashraj.C on 12/21/2015.",
            "line": " collections/bodyItemsCollection.js:1"
        },
        {
            "message": "Missing item type\nSearches the item in the collection and marks it as selected.",
            "line": " collections/bodyItemsCollection.js:222"
        },
        {
            "message": "Missing item type\nCreated by Yashraj.C on 1/1/2016.",
            "line": " collections/selectedTags.js:1"
        },
        {
            "message": "Missing item type\nCreated by Yashraj.C on 12/21/2015.",
            "line": " models/bodyItemModel.js:1"
        },
        {
            "message": "Missing item type\nCreated by Yashraj.C on 1/1/2016.",
            "line": " models/selectedTag.js:1"
        },
        {
            "message": "Missing item type\nCreated by Yashraj.C on 12/4/2015.",
            "line": " views/ddBodyCompView.js:1"
        },
        {
            "message": "Missing item type\nClick handler for the footer item click.\nChecks if the footer config was provided and if yes, triggers the click event of the footer.",
            "line": " views/ddBodyCompView.js:199"
        },
        {
            "message": "Missing item type\nClick handler for the footer item click.\nChecks if the footer config was provided and if yes, triggers the click event of the footer.",
            "line": " views/ddBodyCompView.js:214"
        },
        {
            "message": "Missing item type\nDeselects all the items in the collection.",
            "line": " views/ddBodyCompView.js:230"
        },
        {
            "message": "Missing item type\nHandles the bodyItemClick which is triggered by the child view.\nPerforms the selection logic for the item based on the config - multiSelect | singleSelect\nTriggers the event that is listened by the parent view.",
            "line": " views/ddBodyCompView.js:238"
        },
        {
            "message": "Missing item type\nHandles the child event triggered by the action item click.\nInvokes the action item click callback specified in the configuration.",
            "line": " views/ddBodyCompView.js:260"
        },
        {
            "message": "Missing item type\nHandles the add new item event that gets triggered by the child view.\nTriggers the event that is listened by the parent view to act on the same.",
            "line": " views/ddBodyCompView.js:277"
        },
        {
            "message": "Missing item type\nFilters the results in the collection based on the text that is passed to the view.",
            "line": " views/ddBodyCompView.js:286"
        },
        {
            "message": "Missing item type\nShows the loader in the view.",
            "line": " views/ddBodyCompView.js:299"
        },
        {
            "message": "Missing item type\nHides the loader in the view.",
            "line": " views/ddBodyCompView.js:308"
        },
        {
            "message": "Missing item type\nA handler that gets passed to the filter item method of the collection\nto be invoked whenever the data in the collection has been refreshed based on\nwhatever user has typed",
            "line": " views/ddBodyCompView.js:317"
        },
        {
            "message": "Missing item type\nReturns true of false based on the visible items present in the collection.",
            "line": " views/ddBodyCompView.js:342"
        },
        {
            "message": "Missing item type\nTraverses through the list based on the keyCode number that is passed.\nPreforms various logic based on the key that was pressed.\nFor the navigation in the list keys, highlights and scrolls to the items that should be shown\nas selected.",
            "line": " views/ddBodyCompView.js:356"
        },
        {
            "message": "Missing item type\nDeselects the item in the collection that is passed.",
            "line": " views/ddBodyCompView.js:424"
        },
        {
            "message": "Missing item type\nSelects the item in the collection that is passed.",
            "line": " views/ddBodyCompView.js:433"
        },
        {
            "message": "Missing item type\nReturns the visibility of the view.",
            "line": " views/ddBodyCompView.js:442"
        },
        {
            "message": "Missing item type\nShows the list view. Binds the event to hide the view if user clicks anywhere else.",
            "line": " views/ddBodyCompView.js:450"
        },
        {
            "message": "Missing item type\nHides the view and unbinds the events that were bound while showing the view.",
            "line": " views/ddBodyCompView.js:471"
        },
        {
            "message": "Missing item type\nBinds the hide events to hide the dropdown list whenever user clicks somewhere else.",
            "line": " views/ddBodyCompView.js:479"
        },
        {
            "message": "Missing item type\nUnbinds the event that was bound on the document while showing the list.",
            "line": " views/ddBodyCompView.js:493"
        },
        {
            "message": "Missing item type\nScrolls to the items that should be shown as highlighted whenever user is traversing\nin the list.",
            "line": " views/ddBodyCompView.js:501"
        },
        {
            "message": "Missing item type\nDeselects all the items in the collection.",
            "line": " views/ddBodyCompView.js:539"
        },
        {
            "message": "Missing item type\nCreated by Yashraj.C on 12/7/2015.",
            "line": " views/ddBodyEmptyView.js:1"
        },
        {
            "message": "Missing item type\nClick handler for the add new item.\nTriggers the add new item if the config is set to allow add new items.",
            "line": " views/ddBodyEmptyView.js:31"
        },
        {
            "message": "Missing item type\nCreated by Yashraj.C on 12/4/2015.",
            "line": " views/ddBodyItemView.js:1"
        },
        {
            "message": "Missing item type\nClick handler for the body item.\nTriggers the itemClick that gets listened by the parent view.",
            "line": " views/ddBodyItemView.js:55"
        },
        {
            "message": "Missing item type\nHandler for the action item click.\nGets the item config for the clicked action and triggers the event being listened by the parent view.",
            "line": " views/ddBodyItemView.js:69"
        },
        {
            "message": "Missing item type\nA change attribute handler for the model.\nListening to the selected attribute of the model.\nUpdates the view whenever the model gets changed.",
            "line": " views/ddBodyItemView.js:90"
        },
        {
            "message": "Missing item type\nA change attribute handler for the model.\nListening to the visible attribute of the model.\nUpdate the view whenever the view gets changed.",
            "line": " views/ddBodyItemView.js:106"
        },
        {
            "message": "Missing item type\nMouse over event handler for the view to manipulate the hover classes.",
            "line": " views/ddBodyItemView.js:116"
        },
        {
            "message": "Missing item type\nMouse out event handler for the view to manipulate the hover classes.",
            "line": " views/ddBodyItemView.js:124"
        },
        {
            "message": "Missing item type\nAdds the hover class to the view.",
            "line": " views/ddBodyItemView.js:132"
        },
        {
            "message": "Missing item type\nRemoves the hover class from the view.",
            "line": " views/ddBodyItemView.js:140"
        },
        {
            "message": "Missing item type\nCreated by Yashraj.C on 12/4/2015.",
            "line": " views/ddContainerLayoutView.js:1"
        },
        {
            "message": "Missing item type\nHandler for the toggleOptionsList triggered by the headerView.\nHandles the show / hide for the dropdown body view.",
            "line": " views/ddContainerLayoutView.js:120"
        },
        {
            "message": "Missing item type\nReturns the selected items for the dropdown.",
            "line": " views/ddContainerLayoutView.js:160"
        },
        {
            "message": "Missing item type\nSets the items specified as selected items in the dropdown view.",
            "line": " views/ddContainerLayoutView.js:169"
        },
        {
            "message": "Missing item type\nA function that returns the text that has been entered in the\ninput box of the dropdown while searching.",
            "line": " views/ddContainerLayoutView.js:179"
        },
        {
            "message": "Missing item type\nHandler for the textSearch triggered by the headerView.",
            "line": " views/ddContainerLayoutView.js:187"
        },
        {
            "message": "Missing item type\nHandler for the traverseListOrSelectItem triggered by the headerView.",
            "line": " views/ddContainerLayoutView.js:199"
        },
        {
            "message": "Missing item type\nHandler for the bodyItemClick triggered by the bodyView.\nUpdates the header view to reflect the selection.\nInvokes the onItemSelect method if specified.",
            "line": " views/ddContainerLayoutView.js:208"
        },
        {
            "message": "Missing item type\nClears the headerView and bodyView. Removes all the selections that are done.",
            "line": " views/ddContainerLayoutView.js:223"
        },
        {
            "message": "Missing item type\nHandler for the addNewItem triggered by the bodyView.",
            "line": " views/ddContainerLayoutView.js:234"
        },
        {
            "message": "Missing item type\nHandles the footerClick triggered by the dropdown body view.\nInvokes the footer item click if present.",
            "line": " views/ddContainerLayoutView.js:241"
        },
        {
            "message": "Missing item type\nHandler for the deselectItem triggered by the headerView.",
            "line": " views/ddContainerLayoutView.js:255"
        },
        {
            "message": "Missing item type\nHandler for the clearing single select.\nIt'll invoke passed handler if there is any.",
            "line": " views/ddContainerLayoutView.js:264"
        },
        {
            "message": "Missing item type\nHandler for the selectItem triggered by the headerView.",
            "line": " views/ddContainerLayoutView.js:274"
        },
        {
            "message": "Missing item type\nHandler for the hideOptionsList triggered by the headerView.",
            "line": " views/ddContainerLayoutView.js:283"
        },
        {
            "message": "Missing item type\nThis is to check view's status.",
            "line": " views/ddContainerLayoutView.js:290"
        },
        {
            "message": "Missing item type\nThis method is to disable dropdown programmatically.",
            "line": " views/ddContainerLayoutView.js:298"
        },
        {
            "message": "Missing item type\nThis method is to enable dropdown programmatically.",
            "line": " views/ddContainerLayoutView.js:317"
        },
        {
            "message": "Missing item type\nA method which focuses on the input text of the dropdown.",
            "line": " views/ddContainerLayoutView.js:335"
        },
        {
            "message": "Missing item type\nThis method is to call search functionality programmatically.\nIt'll be used in ajax support mostly.",
            "line": " views/ddContainerLayoutView.js:342"
        },
        {
            "message": "Missing item type\nCreated by Yashraj.C on 12/4/2015.",
            "line": " views/ddHeaderLayoutView.js:1"
        },
        {
            "message": "Missing item type\nReturns the selected items array.",
            "line": " views/ddHeaderLayoutView.js:73"
        },
        {
            "message": "Missing item type\nSets the items specified as selected items in the dropdown view.",
            "line": " views/ddHeaderLayoutView.js:82"
        },
        {
            "message": "Missing item type\nA function that returns the text that has been entered in the\ninput box of the dropdown while searching.",
            "line": " views/ddHeaderLayoutView.js:91"
        },
        {
            "message": "Missing item type\nHandler for the toggleOptionsList triggered by the selectedTagsView.\nTriggers the event that is listened by the ddContainerLayoutView.",
            "line": " views/ddHeaderLayoutView.js:99"
        },
        {
            "message": "Missing item type\nInvokes the selectedTagsView's method to update the view of the current selected items.",
            "line": " views/ddHeaderLayoutView.js:107"
        },
        {
            "message": "Missing item type\nHandler for the traverseListOrSelectItem triggered by the selectedTagsView.\nTriggers the event that is listened by the ddContainerLayoutView.",
            "line": " views/ddHeaderLayoutView.js:116"
        },
        {
            "message": "Missing item type\nHandler for the textSearch triggered by the selectedTagsView.\nTriggers the event that is listened by the ddContainerLayoutView.",
            "line": " views/ddHeaderLayoutView.js:126"
        },
        {
            "message": "Missing item type\nHandler for the hideOptionsList triggered by the selectedTagsView.\nTriggers the event that is listened by the ddContainerLayoutView.",
            "line": " views/ddHeaderLayoutView.js:139"
        },
        {
            "message": "Missing item type\nEvent handler for the search icon click.",
            "line": " views/ddHeaderLayoutView.js:147"
        },
        {
            "message": "Missing item type\nAdds a new item to the selected tags. Gets called by the parent view.",
            "line": " views/ddHeaderLayoutView.js:154"
        },
        {
            "message": "Missing item type\nHandler for the deselectItem triggered by the selectedTagsView.\nTriggers the event that is listened by the ddContainerLayoutView.",
            "line": " views/ddHeaderLayoutView.js:161"
        },
        {
            "message": "Missing item type\nHandler for the selectItem triggered by the selectedTagsView.\nTriggers the event that is listened by the ddContainerLayoutView.",
            "line": " views/ddHeaderLayoutView.js:171"
        },
        {
            "message": "Missing item type\nA method which focuses on the input text of the dropdown.",
            "line": " views/ddHeaderLayoutView.js:182"
        },
        {
            "message": "Missing item type\nA method to clear the view.",
            "line": " views/ddHeaderLayoutView.js:189"
        },
        {
            "message": "Missing item type\nThis method is to call search functionality programmatically.\nIt'll be called from parent view.",
            "line": " views/ddHeaderLayoutView.js:195"
        },
        {
            "message": "Missing item type\nHandler for the handleClearSingleSelect triggered by the selectedTagsView.\nTriggers the event that is listened by the ddContainerLayoutView.",
            "line": " views/ddHeaderLayoutView.js:209"
        },
        {
            "message": "Missing item type\nThis method is to disable dropdown programmatically.",
            "line": " views/ddHeaderLayoutView.js:217"
        },
        {
            "message": "Missing item type\nThis method is to enable dropdown programmatically.",
            "line": " views/ddHeaderLayoutView.js:227"
        },
        {
            "message": "Missing item type\nCreated by Yashraj.C on 12/4/2015.",
            "line": " views/selectedTagItemView.js:1"
        },
        {
            "message": "Missing item type\nClick handler for the remove icon to remove the tag that is clicked.",
            "line": " views/selectedTagItemView.js:27"
        },
        {
            "message": "Missing item type\nCreated by Yashraj.C on 12/4/2015.",
            "line": " views/selectedTagsCompView.js:1"
        },
        {
            "message": "Missing item type\nClick event handler for the list toggle button click.\nTriggers the event that is listened by the parent view - ddHeaderLayoutView.",
            "line": " views/selectedTagsCompView.js:101"
        },
        {
            "message": "Missing item type\nClick event handler for the input box present in the view.\nTriggers the event that is listened by the parent view - ddHeaderLayoutView.",
            "line": " views/selectedTagsCompView.js:109"
        },
        {
            "message": "Missing item type\nKey up event handler for the input box present in the view.\nChecks the key that was pressed and triggers the respective event based on the key\npressed.",
            "line": " views/selectedTagsCompView.js:120"
        },
        {
            "message": "Missing item type\nUpdates selected item for the view.\nIf view is single select, updates the text box's value as the selected value, else\nadds the selected item to the selected tags view.",
            "line": " views/selectedTagsCompView.js:162"
        },
        {
            "message": "Missing item type\nRemoves the item from the selected tags.\nFinds the item that was passed from the collection and removes it from the collections.\nView gets updated eventually.",
            "line": " views/selectedTagsCompView.js:195"
        },
        {
            "message": "Missing item type\nGets called whenever user wants to add an item that is not present in the list.\nInvokes the beforeNewItemAdd handler if specified and adds only if the callback returns true.",
            "line": " views/selectedTagsCompView.js:215"
        },
        {
            "message": "Missing item type\nAdds the new item to the selected tags list.",
            "line": " views/selectedTagsCompView.js:241"
        },
        {
            "message": "Missing item type\nHandles the removeTag event that gets triggered by the child view.\nTriggers the event to deselect the item in the list of items.",
            "line": " views/selectedTagsCompView.js:254"
        },
        {
            "message": "Missing item type\nReturns the selected items in the view.",
            "line": " views/selectedTagsCompView.js:266"
        },
        {
            "message": "Missing item type\nUpdates the selected items based on the items list provided.",
            "line": " views/selectedTagsCompView.js:294"
        },
        {
            "message": "Missing item type\nHandles the clear icon click for the input box.\nClears the input value and resets the selected item config\nif the dropdown is single select.",
            "line": " views/selectedTagsCompView.js:325"
        },
        {
            "message": "Missing item type\nA focus event handler for the input box of the dropdown.\nChecks the dropdown's config and selects the entire text of the input if needed.",
            "line": " views/selectedTagsCompView.js:348"
        },
        {
            "message": "Missing item type\nA function that returns the text that has been entered in the\ninput box of the dropdown while searching.",
            "line": " views/selectedTagsCompView.js:362"
        },
        {
            "message": "Missing item type\nA method which focuses on the input text of the dropdown.\nAdded a set timeout as the item may not have been rendered in the dom whenever\nfocus is immediately called after the render of dropdown.",
            "line": " views/selectedTagsCompView.js:370"
        },
        {
            "message": "Missing item type\nSets the value for the input control.",
            "line": " views/selectedTagsCompView.js:383"
        },
        {
            "message": "Missing item type\nAdds the items to the collection.",
            "line": " views/selectedTagsCompView.js:393"
        },
        {
            "message": "Missing item type\nFocuses the input control.",
            "line": " views/selectedTagsCompView.js:403"
        },
        {
            "message": "Missing item type\nClears the input text's value.\nClears the selected items collection to remove all the selected items.",
            "line": " views/selectedTagsCompView.js:413"
        },
        {
            "message": "Missing item type\nThis method is to call search functionality programmatically.\nIt'll be called from parent view.",
            "line": " views/selectedTagsCompView.js:423"
        },
        {
            "message": "Missing item type\nThis method is to disable dropdown programmatically.",
            "line": " views/selectedTagsCompView.js:447"
        },
        {
            "message": "Missing item type\nThis method is to enable dropdown programmatically.",
            "line": " views/selectedTagsCompView.js:458"
        }
    ]
}
